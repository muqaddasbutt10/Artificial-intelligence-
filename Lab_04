# TASK 1 
# Implementing stack

class MyStack:
    def __init__(self):
        self.items = []
    def push_item(self, val):
        self.items.append(val)
        print("Inserted", val, "into stack")
    def pop_item(self):
        if not self.is_empty():
            return self.items.pop()
        return "Stack is empty"
    def is_empty(self):
        return len(self.items) == 0
    def show(self):
        print("Current Stack:", self.items)
    def top(self):
        if not self.is_empty():
            return self.items[-1]
        return "Stack is empty"

# Creating object 
st = MyStack()
st.push_item(10)
st.push_item(20)
st.show()
print("\n")
while True:
        opt = int(input("Do you want to insert more elements? (1 = Yes, 0 = No): "))
        if opt == 1:
            elem = int(input("Enter element: "))
            st.push_item(elem)
        elif opt == 0:
            st.show()
            print("Thanks!")
            break
        else:
            print("Invalid choice. Try again...")
print("\n")
while True:
    if not st.is_empty():
        see = int(input("Do you want to check top element? (1 = Yes, 0 = No): ")) 
        if see == 1:
            print("Top element is:", st.top())
        elif see == 0:
            print("Okay!")
            break
        else:
            print("Invalid Choice. Try again...")
    elif st.is_empty():
        print("Stack is empty!")
        break
print("\n")
while True:
    if not st.is_empty():
        rem = int(input("Do you want to remove top element? (1 = Yes, 0 = No): ")) 
        if rem == 1:
            st.pop_item()
        elif rem == 0:
            print("Okay!")
            st.show()
            break
        else:
            print("Invalid Choice. Try again...")
    elif st.is_empty():
        print("Stack is empty!")
        break
print("\n")

#Task 2
class MyQueue:
    def __init__(self):
        self.items = []
    def add(self, val):
        self.items.append(val)
        print("Inserted", val, "into Queue")
    def remove(self):
        if not self.is_empty():
            return self.items.pop(0)
        return "Queue is empty"
    def is_empty(self):
        return len(self.items) == 0
    def peek_front(self):
        if not self.is_empty():
            return self.items[0]
        return "Queue is empty"
    def show(self):
        print("Current Queue:", self.items)

qu = MyQueue()
qu.add(10)
qu.add(20)
qu.add(30)
qu.show()
print("\n")

qu.remove()
qu.show()
print("\n")

print("Front element is:", qu.peek_front())

#Task 3
def bin_search(numbers, key):
    start = 0
    end = len(numbers) - 1

    while start <= end:
        mid = (start + end) // 2
        if numbers[mid] == key:
            return f"Value found at index {mid}"
        elif numbers[mid] < key:
            start = mid + 1
        else:
            end = mid - 1
    return "Value not present in the list"

# Taking input
nums = list(map(int, input("Enter a sorted list of numbers (space separated): ").split()))
key_val = int(input("Enter the value to search: "))
print(bin_search(nums, key_val))

